import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.BhrxS_qF.js";const e="/assets/image-1.V4qf0Ffh.png",l="/assets/image-2.DANZMLgL.png",p="/assets/image-3.fk3semqy.png",m=JSON.parse('{"title":"性能分析工具-pprof","description":"","frontmatter":{},"headers":[],"relativePath":"Golang/pprof.md","filePath":"Golang/pprof.md","lastUpdated":1726047135000}'),t={name:"Golang/pprof.md"},h=n(`<h1 id="性能分析工具-pprof" tabindex="-1">性能分析工具-pprof <a class="header-anchor" href="#性能分析工具-pprof" aria-label="Permalink to &quot;性能分析工具-pprof&quot;">​</a></h1><h2 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h2><ol><li>基于 HTTP Server 运行，并且可以采集运行时数据进行分析</li><li>通过运行测试用例，并指定所需标识来进行采集</li><li>runtime/pprof：采集程序（非 Server）的指定区块的运行数据进行分析</li></ol><p>比较常用的是用<code>net/http/pprof</code>包，可以在程序运行时采集数据，以下分析均基于<code>net/http/pprof</code></p><h2 id="采集数据" tabindex="-1">采集数据 <a class="header-anchor" href="#采集数据" aria-label="Permalink to &quot;采集数据&quot;">​</a></h2><p>在程序中引入依赖,并启动一个HTTP Server</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net/http</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net/http/pprof</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 业务代码...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 监听 查看 运行情况 访问: http://localhost:8103/debug/pprof/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ListenAndServe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.0.0:8103&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;监听失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>通过浏览器访问<code>http://localhost:8103/debug/pprof/</code>，你会进入下面这个页面<br><img src="`+e+`" alt="alt text" loading="lazy"> 图中可点击的属性，分别代表：</p><ul><li><code>allocs</code>:对所有过去的内存分配进行采样(历史累加)</li><li><code>block</code>:导致同步原语阻塞的栈跟踪(历史累加)</li><li><code>cmdline</code>:当前程序的命令行调用</li><li><code>goroutine</code>:所有当前goroutine的堆栈跟踪。使用debug=2作为查询参数，以与未恢复的panic相同的格式导出。</li><li><code>heap</code>:活动对象的内存分配抽样。您可以在获取堆示例之前指定gc GET参数来运行gc。</li><li><code>mutex</code>:查看导致互斥锁的竞争持有者的堆栈跟踪（历史累加）</li><li><code>profile</code>:CPU配置文件。你可以在seconds GET参数中指定持续时间。获取配置文件后，使用go tool pprof命令来研究该配置文件。</li><li><code>threadcreate</code>:创建新操作系统线程的栈跟踪</li><li><code>trace</code>:当前程序执行的跟踪。你可以在seconds GET参数中指定持续时间。在您获得跟踪文件之后，使用go工具trace命令来调查跟踪。</li></ul><p>⚠️<strong>Tips</strong>:默认情况下是不追踪<code>block</code>和<code>mutex</code>的信息的，如果想要看这两个信息，需要在代码中加上两行：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetBlockProfileRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开启对阻塞操作的跟踪，block  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetMutexProfileFraction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开启对锁调用的跟踪，mutex</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="方式" tabindex="-1">方式 <a class="header-anchor" href="#方式" aria-label="Permalink to &quot;方式&quot;">​</a></h3><p>为了进一步的分析数据，单单依靠这个网页是行不通的，这里采用了较为复杂的方法，但是通用性强：</p><ul><li>执行命令<code>curl -o heap.out http://localhost:8103/debug/pprof/heap</code>将分析数据存储到文件中</li><li>通过<code>go tool pprof heap.out</code> 可对分析文件进行详细的查看 <img src="`+l+'" alt="alt text" loading="lazy"></li><li>也可以将分析文件拷贝到自己的Windows电脑上通过<code>go tool pprof -http=:1234 heap.out</code> 调起浏览器进行可视化的信息查看，（需安装图形工具<a href="http://www.graphviz.org/download/" target="_blank" rel="noreferrer">graphviz</a>） <img src="'+p+'" alt="alt text" loading="lazy"></li></ul><h2 id="分析数据" tabindex="-1">分析数据 <a class="header-anchor" href="#分析数据" aria-label="Permalink to &quot;分析数据&quot;">​</a></h2><p>针对采集好的数据，我们有</p>',16),r=[h];function o(k,d,c,E,g,u){return a(),i("div",null,r)}const y=s(t,[["render",o]]);export{m as __pageData,y as default};
